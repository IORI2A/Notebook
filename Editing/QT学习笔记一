
--------------------------------------------------
Getting Started Programming with Qt Widgets

notepad 示例程序位于
Qt\Examples\Qt-5.13.0\widgets\tutorials\notepad

The application is also available in the example list of Qt Creator's Welcome mode.
可在欢迎页面 搜索 notepad 点击打开此示例工程。


Creating the Notepad Project

project wizard



Main Source File

the main function that is the entry point for all C and C++ based applications

QApplication    (For GUI applications that do not use Qt Widgets, you can use QGuiApplication instead.)

The user interface contains visual elements that are called widgets in Qt. 
Examples of widgets are text edits, scroll bars, labels, and radio buttons. 
A widget can also be a container for other widgets; a dialog or a main application window, for example.

Widgets are not visible by default; the function show() makes the widget visible.

exec()
makes the QApplication enter its event loop. 
When a Qt application is running, events are generated and sent to the widgets of the application.    (events：mouse presses、 key strokes ...）



Designing a UI

notepad.ui
user interface definition in XML format

the Qt User Interface Compiler (uic) that reads the .ui file and creates a corresponding C++ header file, ui_notepad.h.



Using Qt Designer

layout

add widgets



Notepad Header File

namespace Ui {
class Notepad;
}
Notepad UI classes generated from .ui files    (uic tool)

Q_OBJECT macro
It must come first in the class definition, and declares our class as a QObject. 

inherit from QObject

A QObject adds several abilities to a normal C++ class. 
Notably, the class name and slot names can be queried at runtime. It is also possible to query a slot's parameter types and invoke it.

destructors are virtual to ensure that the destructors of derived classes are invoked properly when an object is deleted through a pointer-to-base-class.

Notepad UI class (generated by the uic tool)

Notepad class (generated by the wizard)



Notepad Source File

setupUi()



Project File



Adding User Interaction

Click on "Type Here", and add the options New, Open, Save, Save as, Print and Exit. This creates 5 lines in the Action Editor below. 
并没有在 Action Editor 中自动生成记录 ？？？

菜单 （ QMenu ） 
菜单子项 （ QAction ） 

QAction 才会在 Action Editor 中自动生成记录

To connect the actions to slots, right-click an action and select Go to slot > triggered(), and complete the code for that given slot.
通过开发工具创建槽函数 来响应信号（triggered()）     
工具生成的槽函数命名方式为： on_发送者_信号(参数)
对于自动生成的槽函数，QT框架通过函数名来自动匹配    （ connectSlotsByName() 函数 ）

如何添加资源内容 ？？？    （Creating Resource Files）



--------------------------------------------------
The Qt Resource System 

The Qt resource system is a platform-independent mechanism for storing binary files in the application's executable. This is useful if your application always needs a certain set of files (icons, translation files, etc.) and you don't want to run the risk of losing the files.

Resource Collection Files (.qrc)

The resources associated with an application are specified in a .qrc file, an XML-based file format that lists files on the disk and optionally assigns them a resource name that the application must use to access the resource.

The specified paths are relative to the directory containing the .qrc file. Note that the listed resource files must be located in the same directory as the .qrc file, or one of its subdirectories.

Resource data can either be compiled into the binary and thus accessed immediately in application code, or a binary resource can be created and at a later point in application code registered with the resource system.



--------------------------------------------------
Qt Creator Manual 

Creating Projects 

Selecting the Build System

Using Project Wizards

Selecting Project Type

Adding Files to Projects

Qt
Qt resource files, which allow you to store binary files in the application executable

You can create your own project and class wizards. For more information, see Adding New Custom Wizards. 

Creating Resource Files
The wizard creates a resource collection file (.qrc) that you can manage in the resource editor.

resource editor
Add > Add Prefix
Add > Add Files



--------------------------------------------------
QT 应当如何处理 XML 内容

Qt XML 
The module is not actively maintained anymore. Please use the QXmlStreamReader and QXmlStreamWriter classes in Qt Core instead.

QXmlStreamReader is a faster and more convenient replacement for Qt's own SAX parser (see QXmlSimpleReader). 
In some cases it might also be a faster and more convenient alternative for use in applications that would otherwise use a DOM tree (see QDomDocument). 

QXmlStreamReader 、 QXmlStreamWriter    ( Qt Core )
QXmlSimpleReader 、 QDomDocument    ( Qt XML )



--------------------------------------------------
QT如何获取硬件设备（如，网卡）信息

QNetworkInterface
The QNetworkInterface class provides a listing of the host's IP addresses and network interfaces.

QNetworkInterface also reports the interface's hardware address with hardwareAddress().

Not all operating systems support reporting all features. 
Only the IPv4 addresses are guaranteed to be listed by this class in all platforms. 
In particular, IPv6 address listing is only supported on Windows, Linux, macOS and the BSDs.

Qt Network   (当前QT网络编程还是使用的该模块 2019-08-16)

Qt Documentation
Development Topics (Qt Overviews) (Best Practices)
Networking and Connectivity
Network Communication    (Serial Port Communication)

Qt also offers QTcpServer to enable the server-side part of a TCP communication. 
Please note that there is no HTTP server class in Qt.

nǐ bù néng。dàn bú yào jué wàng ， yǒu bàn fǎ ...



--------------------------------------------------
Examples and Tutorials

Qt Documentation
Examples and Tutorials
List of Qt Examples / All Qt Examples / Community Examples 



--------------------------------------------------
State Chart XML (SCXML): State Machine Notation for Control Abstraction
